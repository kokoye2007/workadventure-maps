import type { Observable } from "rxjs";
import { Subject } from "rxjs";
export declare abstract class AbstractWorkadventureStateCommands<State extends {
    [key: string]: unknown;
}> {
    protected setVariableResolvers: Subject<{
        key: string;
        value?: unknown;
    }>;
    protected variables: Partial<State>;
    protected variableSubscribers: Partial<{
        [K in keyof State]: Subject<State[K]>;
    }>;
    protected constructor();
    initVariables(_variables: Map<string, unknown>): void;
    loadVariable<K extends keyof State>(key: K): State[K] | undefined;
    hasVariable<K extends keyof State>(key: K): boolean;
    onVariableChange<K extends keyof State>(key: K): Observable<State[K]>;
}
