import { z } from "zod";
export interface TypedMessageEvent<T> extends MessageEvent {
    data: T;
}
/**
 * List event types sent from an iFrame to WorkAdventure
 */
export declare const isIframeEventWrapper: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"addActionsMenuKeyToRemotePlayer">;
    data: z.ZodObject<{
        id: z.ZodNumber;
        actionKey: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: number;
        actionKey: string;
    }, {
        id: number;
        actionKey: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "addActionsMenuKeyToRemotePlayer";
    data: {
        id: number;
        actionKey: string;
    };
}, {
    type: "addActionsMenuKeyToRemotePlayer";
    data: {
        id: number;
        actionKey: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"removeActionsMenuKeyFromRemotePlayer">;
    data: z.ZodObject<{
        id: z.ZodNumber;
        actionKey: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: number;
        actionKey: string;
    }, {
        id: number;
        actionKey: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "removeActionsMenuKeyFromRemotePlayer";
    data: {
        id: number;
        actionKey: string;
    };
}, {
    type: "removeActionsMenuKeyFromRemotePlayer";
    data: {
        id: number;
        actionKey: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"loadPage">;
    data: z.ZodObject<{
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
    }, {
        url: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "loadPage";
    data: {
        url: string;
    };
}, {
    type: "loadPage";
    data: {
        url: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"chat">;
    data: z.ZodObject<{
        message: z.ZodString;
        options: z.ZodUnion<[z.ZodObject<{
            scope: z.ZodLiteral<"local">;
            author: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            scope: "local";
            author?: string | undefined;
        }, {
            scope: "local";
            author?: string | undefined;
        }>, z.ZodObject<{
            scope: z.ZodLiteral<"bubble">;
        }, "strip", z.ZodTypeAny, {
            scope: "bubble";
        }, {
            scope: "bubble";
        }>]>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        options: {
            scope: "local";
            author?: string | undefined;
        } | {
            scope: "bubble";
        };
    }, {
        message: string;
        options: {
            scope: "local";
            author?: string | undefined;
        } | {
            scope: "bubble";
        };
    }>;
}, "strip", z.ZodTypeAny, {
    type: "chat";
    data: {
        message: string;
        options: {
            scope: "local";
            author?: string | undefined;
        } | {
            scope: "bubble";
        };
    };
}, {
    type: "chat";
    data: {
        message: string;
        options: {
            scope: "local";
            author?: string | undefined;
        } | {
            scope: "bubble";
        };
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"startWriting">;
    data: z.ZodObject<{
        author: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        author?: string | undefined;
    }, {
        author?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "startWriting";
    data: {
        author?: string | undefined;
    };
}, {
    type: "startWriting";
    data: {
        author?: string | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"stopWriting">;
    data: z.ZodObject<{
        author: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        author?: string | undefined;
    }, {
        author?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "stopWriting";
    data: {
        author?: string | undefined;
    };
}, {
    type: "stopWriting";
    data: {
        author?: string | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"openChat">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "openChat";
    data?: undefined;
}, {
    type: "openChat";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"closeChat">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "closeChat";
    data?: undefined;
}, {
    type: "closeChat";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"addPersonnalMessage">;
    data: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "addPersonnalMessage";
    data: string;
}, {
    type: "addPersonnalMessage";
    data: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"newChatMessageWritingStatus">;
    data: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    type: "newChatMessageWritingStatus";
    data: number;
}, {
    type: "newChatMessageWritingStatus";
    data: number;
}>, z.ZodObject<{
    type: z.ZodLiteral<"cameraFollowPlayer">;
    data: z.ZodObject<{
        smooth: z.ZodBoolean;
        duration: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        smooth: boolean;
        duration?: number | undefined;
    }, {
        smooth: boolean;
        duration?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "cameraFollowPlayer";
    data: {
        smooth: boolean;
        duration?: number | undefined;
    };
}, {
    type: "cameraFollowPlayer";
    data: {
        smooth: boolean;
        duration?: number | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"cameraSet">;
    data: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
        width: z.ZodOptional<z.ZodNumber>;
        height: z.ZodOptional<z.ZodNumber>;
        lock: z.ZodBoolean;
        smooth: z.ZodBoolean;
        duration: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        lock: boolean;
        smooth: boolean;
        height?: number | undefined;
        width?: number | undefined;
        duration?: number | undefined;
    }, {
        x: number;
        y: number;
        lock: boolean;
        smooth: boolean;
        height?: number | undefined;
        width?: number | undefined;
        duration?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "cameraSet";
    data: {
        x: number;
        y: number;
        lock: boolean;
        smooth: boolean;
        height?: number | undefined;
        width?: number | undefined;
        duration?: number | undefined;
    };
}, {
    type: "cameraSet";
    data: {
        x: number;
        y: number;
        lock: boolean;
        smooth: boolean;
        height?: number | undefined;
        width?: number | undefined;
        duration?: number | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"openPopup">;
    data: z.ZodObject<{
        popupId: z.ZodNumber;
        targetObject: z.ZodString;
        message: z.ZodString;
        buttons: z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            className: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            className?: string | undefined;
        }, {
            label: string;
            className?: string | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        message: string;
        popupId: number;
        targetObject: string;
        buttons: {
            label: string;
            className?: string | undefined;
        }[];
    }, {
        message: string;
        popupId: number;
        targetObject: string;
        buttons: {
            label: string;
            className?: string | undefined;
        }[];
    }>;
}, "strip", z.ZodTypeAny, {
    type: "openPopup";
    data: {
        message: string;
        popupId: number;
        targetObject: string;
        buttons: {
            label: string;
            className?: string | undefined;
        }[];
    };
}, {
    type: "openPopup";
    data: {
        message: string;
        popupId: number;
        targetObject: string;
        buttons: {
            label: string;
            className?: string | undefined;
        }[];
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"closePopup">;
    data: z.ZodObject<{
        popupId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        popupId: number;
    }, {
        popupId: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "closePopup";
    data: {
        popupId: number;
    };
}, {
    type: "closePopup";
    data: {
        popupId: number;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"openTab">;
    data: z.ZodObject<{
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
    }, {
        url: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "openTab";
    data: {
        url: string;
    };
}, {
    type: "openTab";
    data: {
        url: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"goToPage">;
    data: z.ZodObject<{
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
    }, {
        url: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "goToPage";
    data: {
        url: string;
    };
}, {
    type: "goToPage";
    data: {
        url: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"turnOffMicrophone">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "turnOffMicrophone";
    data?: undefined;
}, {
    type: "turnOffMicrophone";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"turnOffWebcam">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "turnOffWebcam";
    data?: undefined;
}, {
    type: "turnOffWebcam";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"disableMicrophone">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "disableMicrophone";
    data?: undefined;
}, {
    type: "disableMicrophone";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"restoreMicrophone">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "restoreMicrophone";
    data?: undefined;
}, {
    type: "restoreMicrophone";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"disableWebcam">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "disableWebcam";
    data?: undefined;
}, {
    type: "disableWebcam";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"restoreWebcam">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "restoreWebcam";
    data?: undefined;
}, {
    type: "restoreWebcam";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"disablePlayerControls">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "disablePlayerControls";
    data?: undefined;
}, {
    type: "disablePlayerControls";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"restorePlayerControls">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "restorePlayerControls";
    data?: undefined;
}, {
    type: "restorePlayerControls";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"disablePlayerProximityMeeting">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "disablePlayerProximityMeeting";
    data?: undefined;
}, {
    type: "disablePlayerProximityMeeting";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"restorePlayerProximityMeeting">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "restorePlayerProximityMeeting";
    data?: undefined;
}, {
    type: "restorePlayerProximityMeeting";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"displayBubble">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "displayBubble";
    data?: undefined;
}, {
    type: "displayBubble";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"removeBubble">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "removeBubble";
    data?: undefined;
}, {
    type: "removeBubble";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"onPlayerMove">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "onPlayerMove";
    data?: undefined;
}, {
    type: "onPlayerMove";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"onCameraUpdate">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "onCameraUpdate";
    data?: undefined;
}, {
    type: "onCameraUpdate";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"showLayer">;
    data: z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "showLayer";
    data: {
        name: string;
    };
}, {
    type: "showLayer";
    data: {
        name: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"hideLayer">;
    data: z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "hideLayer";
    data: {
        name: string;
    };
}, {
    type: "hideLayer";
    data: {
        name: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"setProperty">;
    data: z.ZodObject<{
        layerName: z.ZodString;
        propertyName: z.ZodString;
        propertyValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
    }, "strip", z.ZodTypeAny, {
        layerName: string;
        propertyName: string;
        propertyValue?: string | number | boolean | undefined;
    }, {
        layerName: string;
        propertyName: string;
        propertyValue?: string | number | boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "setProperty";
    data: {
        layerName: string;
        propertyName: string;
        propertyValue?: string | number | boolean | undefined;
    };
}, {
    type: "setProperty";
    data: {
        layerName: string;
        propertyName: string;
        propertyValue?: string | number | boolean | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"setAreaProperty">;
    data: z.ZodObject<{
        areaName: z.ZodString;
        propertyName: z.ZodString;
        propertyValue: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
    }, "strip", z.ZodTypeAny, {
        propertyName: string;
        areaName: string;
        propertyValue?: string | number | boolean | undefined;
    }, {
        propertyName: string;
        areaName: string;
        propertyValue?: string | number | boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "setAreaProperty";
    data: {
        propertyName: string;
        areaName: string;
        propertyValue?: string | number | boolean | undefined;
    };
}, {
    type: "setAreaProperty";
    data: {
        propertyName: string;
        areaName: string;
        propertyValue?: string | number | boolean | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"loadSound">;
    data: z.ZodObject<{
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
    }, {
        url: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "loadSound";
    data: {
        url: string;
    };
}, {
    type: "loadSound";
    data: {
        url: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"playSound">;
    data: z.ZodObject<{
        url: z.ZodString;
        config: z.ZodOptional<z.ZodObject<{
            volume: z.ZodOptional<z.ZodNumber>;
            loop: z.ZodOptional<z.ZodBoolean>;
            mute: z.ZodOptional<z.ZodBoolean>;
            rate: z.ZodOptional<z.ZodNumber>;
            detune: z.ZodOptional<z.ZodNumber>;
            seek: z.ZodOptional<z.ZodNumber>;
            delay: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            volume?: number | undefined;
            loop?: boolean | undefined;
            mute?: boolean | undefined;
            rate?: number | undefined;
            detune?: number | undefined;
            seek?: number | undefined;
            delay?: number | undefined;
        }, {
            volume?: number | undefined;
            loop?: boolean | undefined;
            mute?: boolean | undefined;
            rate?: number | undefined;
            detune?: number | undefined;
            seek?: number | undefined;
            delay?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        url: string;
        config?: {
            volume?: number | undefined;
            loop?: boolean | undefined;
            mute?: boolean | undefined;
            rate?: number | undefined;
            detune?: number | undefined;
            seek?: number | undefined;
            delay?: number | undefined;
        } | undefined;
    }, {
        url: string;
        config?: {
            volume?: number | undefined;
            loop?: boolean | undefined;
            mute?: boolean | undefined;
            rate?: number | undefined;
            detune?: number | undefined;
            seek?: number | undefined;
            delay?: number | undefined;
        } | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "playSound";
    data: {
        url: string;
        config?: {
            volume?: number | undefined;
            loop?: boolean | undefined;
            mute?: boolean | undefined;
            rate?: number | undefined;
            detune?: number | undefined;
            seek?: number | undefined;
            delay?: number | undefined;
        } | undefined;
    };
}, {
    type: "playSound";
    data: {
        url: string;
        config?: {
            volume?: number | undefined;
            loop?: boolean | undefined;
            mute?: boolean | undefined;
            rate?: number | undefined;
            detune?: number | undefined;
            seek?: number | undefined;
            delay?: number | undefined;
        } | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"stopSound">;
    data: z.ZodObject<{
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
    }, {
        url: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "stopSound";
    data: {
        url: string;
    };
}, {
    type: "stopSound";
    data: {
        url: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"registerMenu">;
    data: z.ZodObject<{
        name: z.ZodString;
        iframe: z.ZodOptional<z.ZodString>;
        key: z.ZodString;
        options: z.ZodObject<{
            allowApi: z.ZodBoolean;
            allow: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            allowApi: boolean;
            allow?: string | undefined;
        }, {
            allowApi: boolean;
            allow?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        options: {
            allowApi: boolean;
            allow?: string | undefined;
        };
        name: string;
        key: string;
        iframe?: string | undefined;
    }, {
        options: {
            allowApi: boolean;
            allow?: string | undefined;
        };
        name: string;
        key: string;
        iframe?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "registerMenu";
    data: {
        options: {
            allowApi: boolean;
            allow?: string | undefined;
        };
        name: string;
        key: string;
        iframe?: string | undefined;
    };
}, {
    type: "registerMenu";
    data: {
        options: {
            allowApi: boolean;
            allow?: string | undefined;
        };
        name: string;
        key: string;
        iframe?: string | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"unregisterMenu">;
    data: z.ZodObject<{
        key: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        key: string;
    }, {
        key: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "unregisterMenu";
    data: {
        key: string;
    };
}, {
    type: "unregisterMenu";
    data: {
        key: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"openMenu">;
    data: z.ZodObject<{
        key: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        key: string;
    }, {
        key: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "openMenu";
    data: {
        key: string;
    };
}, {
    type: "openMenu";
    data: {
        key: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"setTiles">;
    data: z.ZodArray<z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
        tile: z.ZodUnion<[z.ZodNumber, z.ZodString, z.ZodNull]>;
        layer: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        tile: string | number | null;
        layer: string;
    }, {
        x: number;
        y: number;
        tile: string | number | null;
        layer: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "setTiles";
    data: {
        x: number;
        y: number;
        tile: string | number | null;
        layer: string;
    }[];
}, {
    type: "setTiles";
    data: {
        x: number;
        y: number;
        tile: string | number | null;
        layer: string;
    }[];
}>, z.ZodObject<{
    type: z.ZodLiteral<"modifyEmbeddedWebsite">;
    data: z.ZodObject<{
        name: z.ZodString;
        url: z.ZodOptional<z.ZodString>;
        visible: z.ZodOptional<z.ZodBoolean>;
        allowApi: z.ZodOptional<z.ZodBoolean>;
        allow: z.ZodOptional<z.ZodString>;
        x: z.ZodOptional<z.ZodNumber>;
        y: z.ZodOptional<z.ZodNumber>;
        width: z.ZodOptional<z.ZodNumber>;
        height: z.ZodOptional<z.ZodNumber>;
        origin: z.ZodOptional<z.ZodEnum<["player", "map"]>>;
        scale: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        url?: string | undefined;
        height?: number | undefined;
        width?: number | undefined;
        allowApi?: boolean | undefined;
        x?: number | undefined;
        y?: number | undefined;
        visible?: boolean | undefined;
        allow?: string | undefined;
        origin?: "map" | "player" | undefined;
        scale?: number | undefined;
    }, {
        name: string;
        url?: string | undefined;
        height?: number | undefined;
        width?: number | undefined;
        allowApi?: boolean | undefined;
        x?: number | undefined;
        y?: number | undefined;
        visible?: boolean | undefined;
        allow?: string | undefined;
        origin?: "map" | "player" | undefined;
        scale?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "modifyEmbeddedWebsite";
    data: {
        name: string;
        url?: string | undefined;
        height?: number | undefined;
        width?: number | undefined;
        allowApi?: boolean | undefined;
        x?: number | undefined;
        y?: number | undefined;
        visible?: boolean | undefined;
        allow?: string | undefined;
        origin?: "map" | "player" | undefined;
        scale?: number | undefined;
    };
}, {
    type: "modifyEmbeddedWebsite";
    data: {
        name: string;
        url?: string | undefined;
        height?: number | undefined;
        width?: number | undefined;
        allowApi?: boolean | undefined;
        x?: number | undefined;
        y?: number | undefined;
        visible?: boolean | undefined;
        allow?: string | undefined;
        origin?: "map" | "player" | undefined;
        scale?: number | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"modifyUIWebsite">;
    data: z.ZodObject<{
        id: z.ZodString;
        url: z.ZodOptional<z.ZodString>;
        visible: z.ZodOptional<z.ZodBoolean>;
        position: z.ZodOptional<z.ZodObject<{
            vertical: z.ZodEnum<["top", "middle", "bottom"]>;
            horizontal: z.ZodEnum<["left", "middle", "right"]>;
        }, "strip", z.ZodTypeAny, {
            vertical: "top" | "bottom" | "middle";
            horizontal: "left" | "right" | "middle";
        }, {
            vertical: "top" | "bottom" | "middle";
            horizontal: "left" | "right" | "middle";
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            height: z.ZodString;
            width: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            height: string;
            width: string;
        }, {
            height: string;
            width: string;
        }>>;
        margin: z.ZodOptional<z.ZodObject<{
            top: z.ZodOptional<z.ZodOptional<z.ZodString>>;
            bottom: z.ZodOptional<z.ZodOptional<z.ZodString>>;
            left: z.ZodOptional<z.ZodOptional<z.ZodString>>;
            right: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            left?: string | undefined;
            top?: string | undefined;
            bottom?: string | undefined;
            right?: string | undefined;
        }, {
            left?: string | undefined;
            top?: string | undefined;
            bottom?: string | undefined;
            right?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        url?: string | undefined;
        position?: {
            vertical: "top" | "bottom" | "middle";
            horizontal: "left" | "right" | "middle";
        } | undefined;
        visible?: boolean | undefined;
        size?: {
            height: string;
            width: string;
        } | undefined;
        margin?: {
            left?: string | undefined;
            top?: string | undefined;
            bottom?: string | undefined;
            right?: string | undefined;
        } | undefined;
    }, {
        id: string;
        url?: string | undefined;
        position?: {
            vertical: "top" | "bottom" | "middle";
            horizontal: "left" | "right" | "middle";
        } | undefined;
        visible?: boolean | undefined;
        size?: {
            height: string;
            width: string;
        } | undefined;
        margin?: {
            left?: string | undefined;
            top?: string | undefined;
            bottom?: string | undefined;
            right?: string | undefined;
        } | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "modifyUIWebsite";
    data: {
        id: string;
        url?: string | undefined;
        position?: {
            vertical: "top" | "bottom" | "middle";
            horizontal: "left" | "right" | "middle";
        } | undefined;
        visible?: boolean | undefined;
        size?: {
            height: string;
            width: string;
        } | undefined;
        margin?: {
            left?: string | undefined;
            top?: string | undefined;
            bottom?: string | undefined;
            right?: string | undefined;
        } | undefined;
    };
}, {
    type: "modifyUIWebsite";
    data: {
        id: string;
        url?: string | undefined;
        position?: {
            vertical: "top" | "bottom" | "middle";
            horizontal: "left" | "right" | "middle";
        } | undefined;
        visible?: boolean | undefined;
        size?: {
            height: string;
            width: string;
        } | undefined;
        margin?: {
            left?: string | undefined;
            top?: string | undefined;
            bottom?: string | undefined;
            right?: string | undefined;
        } | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"modifyArea">;
    data: z.ZodObject<{
        name: z.ZodString;
        x: z.ZodOptional<z.ZodNumber>;
        y: z.ZodOptional<z.ZodNumber>;
        width: z.ZodOptional<z.ZodNumber>;
        height: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        height?: number | undefined;
        width?: number | undefined;
        x?: number | undefined;
        y?: number | undefined;
    }, {
        name: string;
        height?: number | undefined;
        width?: number | undefined;
        x?: number | undefined;
        y?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "modifyArea";
    data: {
        name: string;
        height?: number | undefined;
        width?: number | undefined;
        x?: number | undefined;
        y?: number | undefined;
    };
}, {
    type: "modifyArea";
    data: {
        name: string;
        height?: number | undefined;
        width?: number | undefined;
        x?: number | undefined;
        y?: number | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"askPosition">;
    data: z.ZodObject<{
        uuid: z.ZodString;
        playUri: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        uuid: string;
        playUri: string;
    }, {
        uuid: string;
        playUri: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "askPosition";
    data: {
        uuid: string;
        playUri: string;
    };
}, {
    type: "askPosition";
    data: {
        uuid: string;
        playUri: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"openInviteMenu">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "openInviteMenu";
    data?: undefined;
}, {
    type: "openInviteMenu";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"login">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "login";
    data?: undefined;
}, {
    type: "login";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"refresh">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "refresh";
    data?: undefined;
}, {
    type: "refresh";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"showBusinessCard">;
    data: z.ZodObject<{
        visitCardUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        visitCardUrl: string;
    }, {
        visitCardUrl: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "showBusinessCard";
    data: {
        visitCardUrl: string;
    };
}, {
    type: "showBusinessCard";
    data: {
        visitCardUrl: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"openModal">;
    data: z.ZodObject<{
        src: z.ZodString;
        allow: z.ZodDefault<z.ZodNullable<z.ZodOptional<z.ZodString>>>;
        title: z.ZodDefault<z.ZodOptional<z.ZodString>>;
        position: z.ZodDefault<z.ZodOptional<z.ZodEnum<["right", "left", "center"]>>>;
        allowApi: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
        allowFullScreen: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        title: string;
        allowApi: boolean;
        position: "left" | "right" | "center";
        allow: string | null;
        src: string;
        allowFullScreen: boolean;
    }, {
        src: string;
        title?: string | undefined;
        allowApi?: boolean | undefined;
        position?: "left" | "right" | "center" | undefined;
        allow?: string | null | undefined;
        allowFullScreen?: boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "openModal";
    data: {
        title: string;
        allowApi: boolean;
        position: "left" | "right" | "center";
        allow: string | null;
        src: string;
        allowFullScreen: boolean;
    };
}, {
    type: "openModal";
    data: {
        src: string;
        title?: string | undefined;
        allowApi?: boolean | undefined;
        position?: "left" | "right" | "center" | undefined;
        allow?: string | null | undefined;
        allowFullScreen?: boolean | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"closeModal">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "closeModal";
    data?: undefined;
}, {
    type: "closeModal";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"redirectPricing">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "redirectPricing";
    data?: undefined;
}, {
    type: "redirectPricing";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"addButtonActionBar">;
    data: z.ZodObject<{
        id: z.ZodString;
        label: z.ZodOptional<z.ZodString>;
        toolTip: z.ZodOptional<z.ZodString>;
        bgColor: z.ZodOptional<z.ZodString>;
        textColor: z.ZodOptional<z.ZodString>;
        imageSrc: z.ZodOptional<z.ZodString>;
        isGradient: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        isGradient: boolean;
        label?: string | undefined;
        toolTip?: string | undefined;
        bgColor?: string | undefined;
        textColor?: string | undefined;
        imageSrc?: string | undefined;
    }, {
        id: string;
        label?: string | undefined;
        toolTip?: string | undefined;
        bgColor?: string | undefined;
        textColor?: string | undefined;
        imageSrc?: string | undefined;
        isGradient?: boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "addButtonActionBar";
    data: {
        id: string;
        isGradient: boolean;
        label?: string | undefined;
        toolTip?: string | undefined;
        bgColor?: string | undefined;
        textColor?: string | undefined;
        imageSrc?: string | undefined;
    };
}, {
    type: "addButtonActionBar";
    data: {
        id: string;
        label?: string | undefined;
        toolTip?: string | undefined;
        bgColor?: string | undefined;
        textColor?: string | undefined;
        imageSrc?: string | undefined;
        isGradient?: boolean | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"removeButtonActionBar">;
    data: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "removeButtonActionBar";
    data: {
        id: string;
    };
}, {
    type: "removeButtonActionBar";
    data: {
        id: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"openBanner">;
    data: z.ZodObject<{
        id: z.ZodString;
        text: z.ZodString;
        bgColor: z.ZodOptional<z.ZodString>;
        textColor: z.ZodOptional<z.ZodString>;
        closable: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
        timeToClose: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        link: z.ZodOptional<z.ZodObject<{
            url: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            url: string;
            label: string;
        }, {
            url: string;
            label: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        text: string;
        id: string;
        link?: {
            url: string;
            label: string;
        } | undefined;
        closable?: boolean | undefined;
        bgColor?: string | undefined;
        textColor?: string | undefined;
        timeToClose?: number | undefined;
    }, {
        text: string;
        id: string;
        link?: {
            url: string;
            label: string;
        } | undefined;
        closable?: boolean | undefined;
        bgColor?: string | undefined;
        textColor?: string | undefined;
        timeToClose?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "openBanner";
    data: {
        text: string;
        id: string;
        link?: {
            url: string;
            label: string;
        } | undefined;
        closable?: boolean | undefined;
        bgColor?: string | undefined;
        textColor?: string | undefined;
        timeToClose?: number | undefined;
    };
}, {
    type: "openBanner";
    data: {
        text: string;
        id: string;
        link?: {
            url: string;
            label: string;
        } | undefined;
        closable?: boolean | undefined;
        bgColor?: string | undefined;
        textColor?: string | undefined;
        timeToClose?: number | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"closeBanner">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "closeBanner";
    data?: undefined;
}, {
    type: "closeBanner";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"activity-picker-result">;
    payload: z.ZodObject<{
        access_code: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        url: z.ZodString;
        author: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            firstname: z.ZodNullable<z.ZodString>;
            lastname: z.ZodNullable<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            firstname: string | null;
            lastname: string | null;
        }, {
            firstname: string | null;
            lastname: string | null;
        }>>>;
        imageUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        lang: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        title: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        type: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        url: string;
        access_code?: string | null | undefined;
        type?: string | null | undefined;
        author?: {
            firstname: string | null;
            lastname: string | null;
        } | null | undefined;
        imageUrl?: string | null | undefined;
        lang?: string | null | undefined;
        title?: string | null | undefined;
    }, {
        url: string;
        access_code?: string | null | undefined;
        type?: string | null | undefined;
        author?: {
            firstname: string | null;
            lastname: string | null;
        } | null | undefined;
        imageUrl?: string | null | undefined;
        lang?: string | null | undefined;
        title?: string | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "activity-picker-result";
    payload: {
        url: string;
        access_code?: string | null | undefined;
        type?: string | null | undefined;
        author?: {
            firstname: string | null;
            lastname: string | null;
        } | null | undefined;
        imageUrl?: string | null | undefined;
        lang?: string | null | undefined;
        title?: string | null | undefined;
    };
}, {
    type: "activity-picker-result";
    payload: {
        url: string;
        access_code?: string | null | undefined;
        type?: string | null | undefined;
        author?: {
            firstname: string | null;
            lastname: string | null;
        } | null | undefined;
        imageUrl?: string | null | undefined;
        lang?: string | null | undefined;
        title?: string | null | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"banUser">;
    data: z.ZodObject<{
        uuid: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        uuid: string;
    }, {
        name: string;
        uuid: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "banUser";
    data: {
        name: string;
        uuid: string;
    };
}, {
    type: "banUser";
    data: {
        name: string;
        uuid: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"disableMapEditor">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "disableMapEditor";
    data?: undefined;
}, {
    type: "disableMapEditor";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"restoreMapEditor">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "restoreMapEditor";
    data?: undefined;
}, {
    type: "restoreMapEditor";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"disableScreenSharing">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "disableScreenSharing";
    data?: undefined;
}, {
    type: "disableScreenSharing";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"restoreScreenSharing">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "restoreScreenSharing";
    data?: undefined;
}, {
    type: "restoreScreenSharing";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"disableRightClick">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "disableRightClick";
    data?: undefined;
}, {
    type: "disableRightClick";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"restoreRightClick">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "restoreRightClick";
    data?: undefined;
}, {
    type: "restoreRightClick";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"disableWheelZoom">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "disableWheelZoom";
    data?: undefined;
}, {
    type: "disableWheelZoom";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"restoreWheelZoom">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "restoreWheelZoom";
    data?: undefined;
}, {
    type: "restoreWheelZoom";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"disableInviteUserButton">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "disableInviteUserButton";
    data?: undefined;
}, {
    type: "disableInviteUserButton";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"restoreInviteUserButton">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "restoreInviteUserButton";
    data?: undefined;
}, {
    type: "restoreInviteUserButton";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"disableRoomList">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "disableRoomList";
    data?: undefined;
}, {
    type: "disableRoomList";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"restoreRoomList">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "restoreRoomList";
    data?: undefined;
}, {
    type: "restoreRoomList";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"startListeningToStreamInBubble">;
    data: z.ZodObject<{
        sampleRate: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        sampleRate: number;
    }, {
        sampleRate: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "startListeningToStreamInBubble";
    data: {
        sampleRate: number;
    };
}, {
    type: "startListeningToStreamInBubble";
    data: {
        sampleRate: number;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"stopListeningToStreamInBubble">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "stopListeningToStreamInBubble";
    data?: undefined;
}, {
    type: "stopListeningToStreamInBubble";
    data?: undefined;
}>]>;
export type IframeEvent = z.infer<typeof isIframeEventWrapper>;
export declare const isIframeResponseEvent: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"userInputChat">;
    data: z.ZodObject<{
        message: z.ZodString;
        senderId: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        senderId?: string | undefined;
    }, {
        message: string;
        senderId?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "userInputChat";
    data: {
        message: string;
        senderId?: string | undefined;
    };
}, {
    type: "userInputChat";
    data: {
        message: string;
        senderId?: string | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"joinProximityMeetingEvent">;
    data: z.ZodObject<{
        users: z.ZodArray<z.ZodObject<{
            playerId: z.ZodNumber;
            name: z.ZodString;
            userUuid: z.ZodString;
            availabilityStatus: z.ZodString;
            outlineColor: z.ZodOptional<z.ZodNumber>;
            position: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: number;
                y: number;
            }>;
            variables: z.ZodMap<z.ZodString, z.ZodUnknown>;
            chatID: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            position: {
                x: number;
                y: number;
            };
            playerId: number;
            variables: Map<string, unknown>;
            userUuid: string;
            availabilityStatus: string;
            outlineColor?: number | undefined;
            chatID?: string | null | undefined;
        }, {
            name: string;
            position: {
                x: number;
                y: number;
            };
            playerId: number;
            variables: Map<string, unknown>;
            userUuid: string;
            availabilityStatus: string;
            outlineColor?: number | undefined;
            chatID?: string | null | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        users: {
            name: string;
            position: {
                x: number;
                y: number;
            };
            playerId: number;
            variables: Map<string, unknown>;
            userUuid: string;
            availabilityStatus: string;
            outlineColor?: number | undefined;
            chatID?: string | null | undefined;
        }[];
    }, {
        users: {
            name: string;
            position: {
                x: number;
                y: number;
            };
            playerId: number;
            variables: Map<string, unknown>;
            userUuid: string;
            availabilityStatus: string;
            outlineColor?: number | undefined;
            chatID?: string | null | undefined;
        }[];
    }>;
}, "strip", z.ZodTypeAny, {
    type: "joinProximityMeetingEvent";
    data: {
        users: {
            name: string;
            position: {
                x: number;
                y: number;
            };
            playerId: number;
            variables: Map<string, unknown>;
            userUuid: string;
            availabilityStatus: string;
            outlineColor?: number | undefined;
            chatID?: string | null | undefined;
        }[];
    };
}, {
    type: "joinProximityMeetingEvent";
    data: {
        users: {
            name: string;
            position: {
                x: number;
                y: number;
            };
            playerId: number;
            variables: Map<string, unknown>;
            userUuid: string;
            availabilityStatus: string;
            outlineColor?: number | undefined;
            chatID?: string | null | undefined;
        }[];
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"participantJoinProximityMeetingEvent">;
    data: z.ZodObject<{
        user: z.ZodObject<{
            playerId: z.ZodNumber;
            name: z.ZodString;
            userUuid: z.ZodString;
            availabilityStatus: z.ZodString;
            outlineColor: z.ZodOptional<z.ZodNumber>;
            position: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: number;
                y: number;
            }>;
            variables: z.ZodMap<z.ZodString, z.ZodUnknown>;
            chatID: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            position: {
                x: number;
                y: number;
            };
            playerId: number;
            variables: Map<string, unknown>;
            userUuid: string;
            availabilityStatus: string;
            outlineColor?: number | undefined;
            chatID?: string | null | undefined;
        }, {
            name: string;
            position: {
                x: number;
                y: number;
            };
            playerId: number;
            variables: Map<string, unknown>;
            userUuid: string;
            availabilityStatus: string;
            outlineColor?: number | undefined;
            chatID?: string | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        user: {
            name: string;
            position: {
                x: number;
                y: number;
            };
            playerId: number;
            variables: Map<string, unknown>;
            userUuid: string;
            availabilityStatus: string;
            outlineColor?: number | undefined;
            chatID?: string | null | undefined;
        };
    }, {
        user: {
            name: string;
            position: {
                x: number;
                y: number;
            };
            playerId: number;
            variables: Map<string, unknown>;
            userUuid: string;
            availabilityStatus: string;
            outlineColor?: number | undefined;
            chatID?: string | null | undefined;
        };
    }>;
}, "strip", z.ZodTypeAny, {
    type: "participantJoinProximityMeetingEvent";
    data: {
        user: {
            name: string;
            position: {
                x: number;
                y: number;
            };
            playerId: number;
            variables: Map<string, unknown>;
            userUuid: string;
            availabilityStatus: string;
            outlineColor?: number | undefined;
            chatID?: string | null | undefined;
        };
    };
}, {
    type: "participantJoinProximityMeetingEvent";
    data: {
        user: {
            name: string;
            position: {
                x: number;
                y: number;
            };
            playerId: number;
            variables: Map<string, unknown>;
            userUuid: string;
            availabilityStatus: string;
            outlineColor?: number | undefined;
            chatID?: string | null | undefined;
        };
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"participantLeaveProximityMeetingEvent">;
    data: z.ZodObject<{
        user: z.ZodObject<{
            playerId: z.ZodNumber;
            name: z.ZodString;
            userUuid: z.ZodString;
            availabilityStatus: z.ZodString;
            outlineColor: z.ZodOptional<z.ZodNumber>;
            position: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: number;
                y: number;
            }>;
            variables: z.ZodMap<z.ZodString, z.ZodUnknown>;
            chatID: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            position: {
                x: number;
                y: number;
            };
            playerId: number;
            variables: Map<string, unknown>;
            userUuid: string;
            availabilityStatus: string;
            outlineColor?: number | undefined;
            chatID?: string | null | undefined;
        }, {
            name: string;
            position: {
                x: number;
                y: number;
            };
            playerId: number;
            variables: Map<string, unknown>;
            userUuid: string;
            availabilityStatus: string;
            outlineColor?: number | undefined;
            chatID?: string | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        user: {
            name: string;
            position: {
                x: number;
                y: number;
            };
            playerId: number;
            variables: Map<string, unknown>;
            userUuid: string;
            availabilityStatus: string;
            outlineColor?: number | undefined;
            chatID?: string | null | undefined;
        };
    }, {
        user: {
            name: string;
            position: {
                x: number;
                y: number;
            };
            playerId: number;
            variables: Map<string, unknown>;
            userUuid: string;
            availabilityStatus: string;
            outlineColor?: number | undefined;
            chatID?: string | null | undefined;
        };
    }>;
}, "strip", z.ZodTypeAny, {
    type: "participantLeaveProximityMeetingEvent";
    data: {
        user: {
            name: string;
            position: {
                x: number;
                y: number;
            };
            playerId: number;
            variables: Map<string, unknown>;
            userUuid: string;
            availabilityStatus: string;
            outlineColor?: number | undefined;
            chatID?: string | null | undefined;
        };
    };
}, {
    type: "participantLeaveProximityMeetingEvent";
    data: {
        user: {
            name: string;
            position: {
                x: number;
                y: number;
            };
            playerId: number;
            variables: Map<string, unknown>;
            userUuid: string;
            availabilityStatus: string;
            outlineColor?: number | undefined;
            chatID?: string | null | undefined;
        };
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"leaveProximityMeetingEvent">;
    data: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    type: "leaveProximityMeetingEvent";
    data?: undefined;
}, {
    type: "leaveProximityMeetingEvent";
    data?: undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"onFollowed">;
    data: z.ZodObject<{
        user: z.ZodObject<{
            playerId: z.ZodNumber;
            name: z.ZodString;
            userUuid: z.ZodString;
            availabilityStatus: z.ZodString;
            outlineColor: z.ZodOptional<z.ZodNumber>;
            position: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: number;
                y: number;
            }>;
            variables: z.ZodMap<z.ZodString, z.ZodUnknown>;
            chatID: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            position: {
                x: number;
                y: number;
            };
            playerId: number;
            variables: Map<string, unknown>;
            userUuid: string;
            availabilityStatus: string;
            outlineColor?: number | undefined;
            chatID?: string | null | undefined;
        }, {
            name: string;
            position: {
                x: number;
                y: number;
            };
            playerId: number;
            variables: Map<string, unknown>;
            userUuid: string;
            availabilityStatus: string;
            outlineColor?: number | undefined;
            chatID?: string | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        user: {
            name: string;
            position: {
                x: number;
                y: number;
            };
            playerId: number;
            variables: Map<string, unknown>;
            userUuid: string;
            availabilityStatus: string;
            outlineColor?: number | undefined;
            chatID?: string | null | undefined;
        };
    }, {
        user: {
            name: string;
            position: {
                x: number;
                y: number;
            };
            playerId: number;
            variables: Map<string, unknown>;
            userUuid: string;
            availabilityStatus: string;
            outlineColor?: number | undefined;
            chatID?: string | null | undefined;
        };
    }>;
}, "strip", z.ZodTypeAny, {
    type: "onFollowed";
    data: {
        user: {
            name: string;
            position: {
                x: number;
                y: number;
            };
            playerId: number;
            variables: Map<string, unknown>;
            userUuid: string;
            availabilityStatus: string;
            outlineColor?: number | undefined;
            chatID?: string | null | undefined;
        };
    };
}, {
    type: "onFollowed";
    data: {
        user: {
            name: string;
            position: {
                x: number;
                y: number;
            };
            playerId: number;
            variables: Map<string, unknown>;
            userUuid: string;
            availabilityStatus: string;
            outlineColor?: number | undefined;
            chatID?: string | null | undefined;
        };
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"onUnfollowed">;
    data: z.ZodObject<{
        user: z.ZodObject<{
            playerId: z.ZodNumber;
            name: z.ZodString;
            userUuid: z.ZodString;
            availabilityStatus: z.ZodString;
            outlineColor: z.ZodOptional<z.ZodNumber>;
            position: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: number;
                y: number;
            }>;
            variables: z.ZodMap<z.ZodString, z.ZodUnknown>;
            chatID: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            position: {
                x: number;
                y: number;
            };
            playerId: number;
            variables: Map<string, unknown>;
            userUuid: string;
            availabilityStatus: string;
            outlineColor?: number | undefined;
            chatID?: string | null | undefined;
        }, {
            name: string;
            position: {
                x: number;
                y: number;
            };
            playerId: number;
            variables: Map<string, unknown>;
            userUuid: string;
            availabilityStatus: string;
            outlineColor?: number | undefined;
            chatID?: string | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        user: {
            name: string;
            position: {
                x: number;
                y: number;
            };
            playerId: number;
            variables: Map<string, unknown>;
            userUuid: string;
            availabilityStatus: string;
            outlineColor?: number | undefined;
            chatID?: string | null | undefined;
        };
    }, {
        user: {
            name: string;
            position: {
                x: number;
                y: number;
            };
            playerId: number;
            variables: Map<string, unknown>;
            userUuid: string;
            availabilityStatus: string;
            outlineColor?: number | undefined;
            chatID?: string | null | undefined;
        };
    }>;
}, "strip", z.ZodTypeAny, {
    type: "onUnfollowed";
    data: {
        user: {
            name: string;
            position: {
                x: number;
                y: number;
            };
            playerId: number;
            variables: Map<string, unknown>;
            userUuid: string;
            availabilityStatus: string;
            outlineColor?: number | undefined;
            chatID?: string | null | undefined;
        };
    };
}, {
    type: "onUnfollowed";
    data: {
        user: {
            name: string;
            position: {
                x: number;
                y: number;
            };
            playerId: number;
            variables: Map<string, unknown>;
            userUuid: string;
            availabilityStatus: string;
            outlineColor?: number | undefined;
            chatID?: string | null | undefined;
        };
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"enterEvent">;
    data: z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "enterEvent";
    data: {
        name: string;
    };
}, {
    type: "enterEvent";
    data: {
        name: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"leaveEvent">;
    data: z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "leaveEvent";
    data: {
        name: string;
    };
}, {
    type: "leaveEvent";
    data: {
        name: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"enterMapEditorAreaEvent">;
    data: z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "enterMapEditorAreaEvent";
    data: {
        name: string;
    };
}, {
    type: "enterMapEditorAreaEvent";
    data: {
        name: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"leaveMapEditorAreaEvent">;
    data: z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "leaveMapEditorAreaEvent";
    data: {
        name: string;
    };
}, {
    type: "leaveMapEditorAreaEvent";
    data: {
        name: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"enterLayerEvent">;
    data: z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "enterLayerEvent";
    data: {
        name: string;
    };
}, {
    type: "enterLayerEvent";
    data: {
        name: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"leaveLayerEvent">;
    data: z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "leaveLayerEvent";
    data: {
        name: string;
    };
}, {
    type: "leaveLayerEvent";
    data: {
        name: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"enterAreaEvent">;
    data: z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "enterAreaEvent";
    data: {
        name: string;
    };
}, {
    type: "enterAreaEvent";
    data: {
        name: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"leaveAreaEvent">;
    data: z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "leaveAreaEvent";
    data: {
        name: string;
    };
}, {
    type: "leaveAreaEvent";
    data: {
        name: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"buttonClickedEvent">;
    data: z.ZodObject<{
        popupId: z.ZodNumber;
        buttonId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        popupId: number;
        buttonId: number;
    }, {
        popupId: number;
        buttonId: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "buttonClickedEvent";
    data: {
        popupId: number;
        buttonId: number;
    };
}, {
    type: "buttonClickedEvent";
    data: {
        popupId: number;
        buttonId: number;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"remotePlayerClickedEvent">;
    data: z.ZodObject<{
        playerId: z.ZodNumber;
        name: z.ZodString;
        userUuid: z.ZodString;
        availabilityStatus: z.ZodString;
        outlineColor: z.ZodOptional<z.ZodNumber>;
        position: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
        }, {
            x: number;
            y: number;
        }>;
        variables: z.ZodMap<z.ZodString, z.ZodUnknown>;
        chatID: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        position: {
            x: number;
            y: number;
        };
        playerId: number;
        variables: Map<string, unknown>;
        userUuid: string;
        availabilityStatus: string;
        outlineColor?: number | undefined;
        chatID?: string | null | undefined;
    }, {
        name: string;
        position: {
            x: number;
            y: number;
        };
        playerId: number;
        variables: Map<string, unknown>;
        userUuid: string;
        availabilityStatus: string;
        outlineColor?: number | undefined;
        chatID?: string | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "remotePlayerClickedEvent";
    data: {
        name: string;
        position: {
            x: number;
            y: number;
        };
        playerId: number;
        variables: Map<string, unknown>;
        userUuid: string;
        availabilityStatus: string;
        outlineColor?: number | undefined;
        chatID?: string | null | undefined;
    };
}, {
    type: "remotePlayerClickedEvent";
    data: {
        name: string;
        position: {
            x: number;
            y: number;
        };
        playerId: number;
        variables: Map<string, unknown>;
        userUuid: string;
        availabilityStatus: string;
        outlineColor?: number | undefined;
        chatID?: string | null | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"actionsMenuActionClickedEvent">;
    data: z.ZodObject<{
        id: z.ZodNumber;
        actionName: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: number;
        actionName: string;
    }, {
        id: number;
        actionName: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "actionsMenuActionClickedEvent";
    data: {
        id: number;
        actionName: string;
    };
}, {
    type: "actionsMenuActionClickedEvent";
    data: {
        id: number;
        actionName: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"hasPlayerMoved">;
    data: z.ZodObject<{
        direction: z.ZodEnum<["right", "left", "up", "down"]>;
        moving: z.ZodBoolean;
        x: z.ZodNumber;
        y: z.ZodNumber;
        oldX: z.ZodOptional<z.ZodNumber>;
        oldY: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        direction: "left" | "right" | "up" | "down";
        moving: boolean;
        oldX?: number | undefined;
        oldY?: number | undefined;
    }, {
        x: number;
        y: number;
        direction: "left" | "right" | "up" | "down";
        moving: boolean;
        oldX?: number | undefined;
        oldY?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "hasPlayerMoved";
    data: {
        x: number;
        y: number;
        direction: "left" | "right" | "up" | "down";
        moving: boolean;
        oldX?: number | undefined;
        oldY?: number | undefined;
    };
}, {
    type: "hasPlayerMoved";
    data: {
        x: number;
        y: number;
        direction: "left" | "right" | "up" | "down";
        moving: boolean;
        oldX?: number | undefined;
        oldY?: number | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"wasCameraUpdated">;
    data: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
        width: z.ZodNumber;
        height: z.ZodNumber;
        zoom: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        height: number;
        width: number;
        x: number;
        y: number;
        zoom: number;
    }, {
        height: number;
        width: number;
        x: number;
        y: number;
        zoom: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "wasCameraUpdated";
    data: {
        height: number;
        width: number;
        x: number;
        y: number;
        zoom: number;
    };
}, {
    type: "wasCameraUpdated";
    data: {
        height: number;
        width: number;
        x: number;
        y: number;
        zoom: number;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"menuItemClicked">;
    data: z.ZodObject<{
        menuItem: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        menuItem: string;
    }, {
        menuItem: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "menuItemClicked";
    data: {
        menuItem: string;
    };
}, {
    type: "menuItemClicked";
    data: {
        menuItem: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"setVariable">;
    data: z.ZodObject<{
        key: z.ZodString;
        value: z.ZodUnknown;
    }, "strip", z.ZodTypeAny, {
        key: string;
        value?: unknown;
    }, {
        key: string;
        value?: unknown;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "setVariable";
    data: {
        key: string;
        value?: unknown;
    };
}, {
    type: "setVariable";
    data: {
        key: string;
        value?: unknown;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"setPlayerVariable">;
    data: z.ZodObject<{
        key: z.ZodString;
        value: z.ZodUnknown;
    }, "strip", z.ZodTypeAny, {
        key: string;
        value?: unknown;
    }, {
        key: string;
        value?: unknown;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "setPlayerVariable";
    data: {
        key: string;
        value?: unknown;
    };
}, {
    type: "setPlayerVariable";
    data: {
        key: string;
        value?: unknown;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"setSharedPlayerVariable">;
    data: z.ZodObject<{
        key: z.ZodString;
        value: z.ZodUnknown;
        playerId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        playerId: number;
        key: string;
        value?: unknown;
    }, {
        playerId: number;
        key: string;
        value?: unknown;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "setSharedPlayerVariable";
    data: {
        playerId: number;
        key: string;
        value?: unknown;
    };
}, {
    type: "setSharedPlayerVariable";
    data: {
        playerId: number;
        key: string;
        value?: unknown;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"receiveEvent">;
    data: z.ZodObject<{
        name: z.ZodString;
        data: z.ZodUnknown;
        senderId: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        data?: unknown;
        senderId?: number | undefined;
    }, {
        name: string;
        data?: unknown;
        senderId?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "receiveEvent";
    data: {
        name: string;
        data?: unknown;
        senderId?: number | undefined;
    };
}, {
    type: "receiveEvent";
    data: {
        name: string;
        data?: unknown;
        senderId?: number | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"messageTriggered">;
    data: z.ZodObject<{
        uuid: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        uuid: string;
    }, {
        uuid: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "messageTriggered";
    data: {
        uuid: string;
    };
}, {
    type: "messageTriggered";
    data: {
        uuid: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"leaveMuc">;
    data: z.ZodObject<{
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
    }, {
        url: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "leaveMuc";
    data: {
        url: string;
    };
}, {
    type: "leaveMuc";
    data: {
        url: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"joinMuc">;
    data: z.ZodObject<{
        url: z.ZodString;
        name: z.ZodString;
        type: z.ZodString;
        subscribe: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        url: string;
        type: string;
        name: string;
        subscribe: boolean;
    }, {
        url: string;
        type: string;
        name: string;
        subscribe: boolean;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "joinMuc";
    data: {
        url: string;
        type: string;
        name: string;
        subscribe: boolean;
    };
}, {
    type: "joinMuc";
    data: {
        url: string;
        type: string;
        name: string;
        subscribe: boolean;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"addRemotePlayer">;
    data: z.ZodObject<{
        playerId: z.ZodNumber;
        name: z.ZodString;
        userUuid: z.ZodString;
        availabilityStatus: z.ZodString;
        outlineColor: z.ZodOptional<z.ZodNumber>;
        position: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
        }, {
            x: number;
            y: number;
        }>;
        variables: z.ZodMap<z.ZodString, z.ZodUnknown>;
        chatID: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        position: {
            x: number;
            y: number;
        };
        playerId: number;
        variables: Map<string, unknown>;
        userUuid: string;
        availabilityStatus: string;
        outlineColor?: number | undefined;
        chatID?: string | null | undefined;
    }, {
        name: string;
        position: {
            x: number;
            y: number;
        };
        playerId: number;
        variables: Map<string, unknown>;
        userUuid: string;
        availabilityStatus: string;
        outlineColor?: number | undefined;
        chatID?: string | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "addRemotePlayer";
    data: {
        name: string;
        position: {
            x: number;
            y: number;
        };
        playerId: number;
        variables: Map<string, unknown>;
        userUuid: string;
        availabilityStatus: string;
        outlineColor?: number | undefined;
        chatID?: string | null | undefined;
    };
}, {
    type: "addRemotePlayer";
    data: {
        name: string;
        position: {
            x: number;
            y: number;
        };
        playerId: number;
        variables: Map<string, unknown>;
        userUuid: string;
        availabilityStatus: string;
        outlineColor?: number | undefined;
        chatID?: string | null | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"removeRemotePlayer">;
    data: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    type: "removeRemotePlayer";
    data: number;
}, {
    type: "removeRemotePlayer";
    data: number;
}>, z.ZodObject<{
    type: z.ZodLiteral<"remotePlayerChanged">;
    data: z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        position: z.ZodOptional<z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
        }, {
            x: number;
            y: number;
        }>>;
        playerId: z.ZodNumber;
        variables: z.ZodOptional<z.ZodMap<z.ZodString, z.ZodUnknown>>;
        availabilityStatus: z.ZodOptional<z.ZodString>;
        outlineColor: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
        chatID: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        playerId: number;
        name?: string | undefined;
        position?: {
            x: number;
            y: number;
        } | undefined;
        variables?: Map<string, unknown> | undefined;
        availabilityStatus?: string | undefined;
        outlineColor?: number | undefined;
        chatID?: string | null | undefined;
    }, {
        playerId: number;
        name?: string | undefined;
        position?: {
            x: number;
            y: number;
        } | undefined;
        variables?: Map<string, unknown> | undefined;
        availabilityStatus?: string | undefined;
        outlineColor?: number | undefined;
        chatID?: string | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "remotePlayerChanged";
    data: {
        playerId: number;
        name?: string | undefined;
        position?: {
            x: number;
            y: number;
        } | undefined;
        variables?: Map<string, unknown> | undefined;
        availabilityStatus?: string | undefined;
        outlineColor?: number | undefined;
        chatID?: string | null | undefined;
    };
}, {
    type: "remotePlayerChanged";
    data: {
        playerId: number;
        name?: string | undefined;
        position?: {
            x: number;
            y: number;
        } | undefined;
        variables?: Map<string, unknown> | undefined;
        availabilityStatus?: string | undefined;
        outlineColor?: number | undefined;
        chatID?: string | null | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"settings">;
    data: z.ZodObject<{
        notification: z.ZodBoolean;
        chatSounds: z.ZodBoolean;
        enableChat: z.ZodBoolean;
        enableChatUpload: z.ZodBoolean;
        enableChatOnlineList: z.ZodBoolean;
        enableChatDisconnectedList: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        notification: boolean;
        chatSounds: boolean;
        enableChat: boolean;
        enableChatUpload: boolean;
        enableChatOnlineList: boolean;
        enableChatDisconnectedList: boolean;
    }, {
        notification: boolean;
        chatSounds: boolean;
        enableChat: boolean;
        enableChatUpload: boolean;
        enableChatOnlineList: boolean;
        enableChatDisconnectedList: boolean;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "settings";
    data: {
        notification: boolean;
        chatSounds: boolean;
        enableChat: boolean;
        enableChatUpload: boolean;
        enableChatOnlineList: boolean;
        enableChatDisconnectedList: boolean;
    };
}, {
    type: "settings";
    data: {
        notification: boolean;
        chatSounds: boolean;
        enableChat: boolean;
        enableChatUpload: boolean;
        enableChatOnlineList: boolean;
        enableChatDisconnectedList: boolean;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"chatVisibility">;
    data: z.ZodObject<{
        visibility: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        visibility: boolean;
    }, {
        visibility: boolean;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "chatVisibility";
    data: {
        visibility: boolean;
    };
}, {
    type: "chatVisibility";
    data: {
        visibility: boolean;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"availabilityStatus">;
    data: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    type: "availabilityStatus";
    data: number;
}, {
    type: "availabilityStatus";
    data: number;
}>, z.ZodObject<{
    type: z.ZodLiteral<"peerConnectionStatus">;
    data: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    type: "peerConnectionStatus";
    data: boolean;
}, {
    type: "peerConnectionStatus";
    data: boolean;
}>, z.ZodObject<{
    type: z.ZodLiteral<"comingUser">;
    data: z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
        type: z.ZodNativeEnum<typeof import("@workadventure/shared-utils").ChatMessageTypes>;
        date: z.ZodDate;
        author: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            name: z.ZodString;
            active: z.ZodBoolean;
            isMe: z.ZodBoolean;
            jid: z.ZodString;
            isMember: z.ZodBoolean;
            color: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            active: boolean;
            isMe: boolean;
            jid: string;
            isMember: boolean;
            color?: string | undefined;
        }, {
            name: string;
            active: boolean;
            isMe: boolean;
            jid: string;
            isMember: boolean;
            color?: string | undefined;
        }>>>;
        name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        targets: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodNullable<z.ZodString>, "many">>>;
        text: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    }, "strip", z.ZodTypeAny, {
        type: import("@workadventure/shared-utils").ChatMessageTypes;
        date: Date;
        author?: {
            name: string;
            active: boolean;
            isMe: boolean;
            jid: string;
            isMember: boolean;
            color?: string | undefined;
        } | null | undefined;
        text?: string[] | null | undefined;
        name?: string | null | undefined;
        id?: string | undefined;
        targets?: (string | null)[] | null | undefined;
    }, {
        type: import("@workadventure/shared-utils").ChatMessageTypes;
        date: Date;
        author?: {
            name: string;
            active: boolean;
            isMe: boolean;
            jid: string;
            isMember: boolean;
            color?: string | undefined;
        } | null | undefined;
        text?: string[] | null | undefined;
        name?: string | null | undefined;
        id?: string | undefined;
        targets?: (string | null)[] | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "comingUser";
    data: {
        type: import("@workadventure/shared-utils").ChatMessageTypes;
        date: Date;
        author?: {
            name: string;
            active: boolean;
            isMe: boolean;
            jid: string;
            isMember: boolean;
            color?: string | undefined;
        } | null | undefined;
        text?: string[] | null | undefined;
        name?: string | null | undefined;
        id?: string | undefined;
        targets?: (string | null)[] | null | undefined;
    };
}, {
    type: "comingUser";
    data: {
        type: import("@workadventure/shared-utils").ChatMessageTypes;
        date: Date;
        author?: {
            name: string;
            active: boolean;
            isMe: boolean;
            jid: string;
            isMember: boolean;
            color?: string | undefined;
        } | null | undefined;
        text?: string[] | null | undefined;
        name?: string | null | undefined;
        id?: string | undefined;
        targets?: (string | null)[] | null | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"addChatMessage">;
    data: z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
        type: z.ZodNativeEnum<typeof import("@workadventure/shared-utils").ChatMessageTypes>;
        date: z.ZodDate;
        author: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            name: z.ZodString;
            active: z.ZodBoolean;
            isMe: z.ZodBoolean;
            jid: z.ZodString;
            isMember: z.ZodBoolean;
            color: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            active: boolean;
            isMe: boolean;
            jid: string;
            isMember: boolean;
            color?: string | undefined;
        }, {
            name: string;
            active: boolean;
            isMe: boolean;
            jid: string;
            isMember: boolean;
            color?: string | undefined;
        }>>>;
        name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        targets: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodNullable<z.ZodString>, "many">>>;
        text: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    }, "strip", z.ZodTypeAny, {
        type: import("@workadventure/shared-utils").ChatMessageTypes;
        date: Date;
        author?: {
            name: string;
            active: boolean;
            isMe: boolean;
            jid: string;
            isMember: boolean;
            color?: string | undefined;
        } | null | undefined;
        text?: string[] | null | undefined;
        name?: string | null | undefined;
        id?: string | undefined;
        targets?: (string | null)[] | null | undefined;
    }, {
        type: import("@workadventure/shared-utils").ChatMessageTypes;
        date: Date;
        author?: {
            name: string;
            active: boolean;
            isMe: boolean;
            jid: string;
            isMember: boolean;
            color?: string | undefined;
        } | null | undefined;
        text?: string[] | null | undefined;
        name?: string | null | undefined;
        id?: string | undefined;
        targets?: (string | null)[] | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "addChatMessage";
    data: {
        type: import("@workadventure/shared-utils").ChatMessageTypes;
        date: Date;
        author?: {
            name: string;
            active: boolean;
            isMe: boolean;
            jid: string;
            isMember: boolean;
            color?: string | undefined;
        } | null | undefined;
        text?: string[] | null | undefined;
        name?: string | null | undefined;
        id?: string | undefined;
        targets?: (string | null)[] | null | undefined;
    };
}, {
    type: "addChatMessage";
    data: {
        type: import("@workadventure/shared-utils").ChatMessageTypes;
        date: Date;
        author?: {
            name: string;
            active: boolean;
            isMe: boolean;
            jid: string;
            isMember: boolean;
            color?: string | undefined;
        } | null | undefined;
        text?: string[] | null | undefined;
        name?: string | null | undefined;
        id?: string | undefined;
        targets?: (string | null)[] | null | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"updateWritingStatusChatList">;
    data: z.ZodObject<{
        users: z.ZodArray<z.ZodObject<{
            jid: z.ZodOptional<z.ZodString>;
            name: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            jid?: string | undefined;
        }, {
            name?: string | undefined;
            jid?: string | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        users: {
            name?: string | undefined;
            jid?: string | undefined;
        }[];
    }, {
        users: {
            name?: string | undefined;
            jid?: string | undefined;
        }[];
    }>;
}, "strip", z.ZodTypeAny, {
    type: "updateWritingStatusChatList";
    data: {
        users: {
            name?: string | undefined;
            jid?: string | undefined;
        }[];
    };
}, {
    type: "updateWritingStatusChatList";
    data: {
        users: {
            name?: string | undefined;
            jid?: string | undefined;
        }[];
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"buttonActionBarTriggered">;
    data: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "buttonActionBarTriggered";
    data: string;
}, {
    type: "buttonActionBarTriggered";
    data: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"modalCloseTrigger">;
    data: z.ZodObject<{
        src: z.ZodString;
        allow: z.ZodDefault<z.ZodNullable<z.ZodOptional<z.ZodString>>>;
        title: z.ZodDefault<z.ZodOptional<z.ZodString>>;
        position: z.ZodDefault<z.ZodOptional<z.ZodEnum<["right", "left", "center"]>>>;
        allowApi: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
        allowFullScreen: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        title: string;
        allowApi: boolean;
        position: "left" | "right" | "center";
        allow: string | null;
        src: string;
        allowFullScreen: boolean;
    }, {
        src: string;
        title?: string | undefined;
        allowApi?: boolean | undefined;
        position?: "left" | "right" | "center" | undefined;
        allow?: string | null | undefined;
        allowFullScreen?: boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "modalCloseTrigger";
    data: {
        title: string;
        allowApi: boolean;
        position: "left" | "right" | "center";
        allow: string | null;
        src: string;
        allowFullScreen: boolean;
    };
}, {
    type: "modalCloseTrigger";
    data: {
        src: string;
        title?: string | undefined;
        allowApi?: boolean | undefined;
        position?: "left" | "right" | "center" | undefined;
        allow?: string | null | undefined;
        allowFullScreen?: boolean | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"banUser">;
    data: z.ZodObject<{
        uuid: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        uuid: string;
    }, {
        name: string;
        uuid: string;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "banUser";
    data: {
        name: string;
        uuid: string;
    };
}, {
    type: "banUser";
    data: {
        name: string;
        uuid: string;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"appendPCMData">;
    data: z.ZodObject<{
        data: z.ZodType<Float32Array<ArrayBuffer>, z.ZodTypeDef, Float32Array<ArrayBuffer>>;
    }, "strip", z.ZodTypeAny, {
        data: Float32Array<ArrayBuffer>;
    }, {
        data: Float32Array<ArrayBuffer>;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "appendPCMData";
    data: {
        data: Float32Array<ArrayBuffer>;
    };
}, {
    type: "appendPCMData";
    data: {
        data: Float32Array<ArrayBuffer>;
    };
}>]>;
export type IframeResponseEvent = z.infer<typeof isIframeResponseEvent>;
export declare const isLookingLikeIframeEventWrapper: z.ZodObject<{
    type: z.ZodString;
    data: z.ZodOptional<z.ZodUnknown>;
    payload: z.ZodOptional<z.ZodUnknown>;
}, "strip", z.ZodTypeAny, {
    type: string;
    data?: unknown;
    payload?: unknown;
}, {
    type: string;
    data?: unknown;
    payload?: unknown;
}>;
/**
 * List event types sent from an iFrame to WorkAdventure that expect a unique answer from WorkAdventure along the type for the answer from WorkAdventure to the iFrame.
 * Types are defined using Type guards that will actually bused to enforce and check types.
 */
export declare const iframeQueryMapTypeGuards: {
    getState: {
        query: z.ZodUndefined;
        answer: z.ZodObject<{
            roomId: z.ZodString;
            hashParameters: z.ZodRecord<z.ZodString, z.ZodString>;
            mapUrl: z.ZodString;
            nickname: z.ZodString;
            language: z.ZodOptional<z.ZodString>;
            playerId: z.ZodOptional<z.ZodNumber>;
            uuid: z.ZodOptional<z.ZodString>;
            startLayerName: z.ZodOptional<z.ZodString>;
            tags: z.ZodArray<z.ZodString, "many">;
            variables: z.ZodUnknown;
            playerVariables: z.ZodUnknown;
            userRoomToken: z.ZodOptional<z.ZodString>;
            metadata: z.ZodOptional<z.ZodUnknown>;
            iframeId: z.ZodOptional<z.ZodString>;
            isLogged: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            roomId: string;
            hashParameters: Record<string, string>;
            mapUrl: string;
            nickname: string;
            tags: string[];
            isLogged: boolean;
            uuid?: string | undefined;
            language?: string | undefined;
            playerId?: number | undefined;
            startLayerName?: string | undefined;
            variables?: unknown;
            playerVariables?: unknown;
            userRoomToken?: string | undefined;
            metadata?: unknown;
            iframeId?: string | undefined;
        }, {
            roomId: string;
            hashParameters: Record<string, string>;
            mapUrl: string;
            nickname: string;
            tags: string[];
            uuid?: string | undefined;
            language?: string | undefined;
            playerId?: number | undefined;
            startLayerName?: string | undefined;
            variables?: unknown;
            playerVariables?: unknown;
            userRoomToken?: string | undefined;
            metadata?: unknown;
            iframeId?: string | undefined;
            isLogged?: boolean | undefined;
        }>;
    };
    getMapData: {
        query: z.ZodUndefined;
        answer: z.ZodObject<{
            data: z.ZodUnknown;
        }, "strip", z.ZodTypeAny, {
            data?: unknown;
        }, {
            data?: unknown;
        }>;
    };
    setVariable: {
        query: z.ZodObject<{
            key: z.ZodString;
            value: z.ZodUnknown;
        }, "strip", z.ZodTypeAny, {
            key: string;
            value?: unknown;
        }, {
            key: string;
            value?: unknown;
        }>;
        answer: z.ZodUndefined;
    };
    setPlayerVariable: {
        query: z.ZodObject<{
            key: z.ZodString;
            value: z.ZodUnknown;
            public: z.ZodBoolean;
            persist: z.ZodBoolean;
            ttl: z.ZodOptional<z.ZodNumber>;
            scope: z.ZodUnion<[z.ZodLiteral<"room">, z.ZodLiteral<"world">]>;
        }, "strip", z.ZodTypeAny, {
            scope: "room" | "world";
            key: string;
            public: boolean;
            persist: boolean;
            value?: unknown;
            ttl?: number | undefined;
        }, {
            scope: "room" | "world";
            key: string;
            public: boolean;
            persist: boolean;
            value?: unknown;
            ttl?: number | undefined;
        }>;
        answer: z.ZodUndefined;
    };
    dispatchEvent: {
        query: z.ZodObject<{
            name: z.ZodString;
            data: z.ZodUnknown;
            targetUserIds: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            data?: unknown;
            targetUserIds?: number[] | undefined;
        }, {
            name: string;
            data?: unknown;
            targetUserIds?: number[] | undefined;
        }>;
        answer: z.ZodUndefined;
    };
    loadTileset: {
        query: z.ZodObject<{
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            url: string;
        }, {
            url: string;
        }>;
        answer: z.ZodNumber;
    };
    openCoWebsite: {
        query: z.ZodObject<{
            url: z.ZodString;
            allowApi: z.ZodOptional<z.ZodBoolean>;
            allowPolicy: z.ZodOptional<z.ZodString>;
            widthPercent: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodNumber>;
            closable: z.ZodOptional<z.ZodBoolean>;
            lazy: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            allowApi?: boolean | undefined;
            allowPolicy?: string | undefined;
            widthPercent?: number | undefined;
            position?: number | undefined;
            closable?: boolean | undefined;
            lazy?: boolean | undefined;
        }, {
            url: string;
            allowApi?: boolean | undefined;
            allowPolicy?: string | undefined;
            widthPercent?: number | undefined;
            position?: number | undefined;
            closable?: boolean | undefined;
            lazy?: boolean | undefined;
        }>;
        answer: z.ZodObject<{
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
        }, {
            id: string;
        }>;
    };
    getCoWebsites: {
        query: z.ZodUndefined;
        answer: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
        }, {
            id: string;
        }>, "many">;
    };
    closeCoWebsite: {
        query: z.ZodString;
        answer: z.ZodUndefined;
    };
    closeCoWebsites: {
        query: z.ZodUndefined;
        answer: z.ZodUndefined;
    };
    goToLogin: {
        query: z.ZodUndefined;
        answer: z.ZodUndefined;
    };
    triggerActionMessage: {
        query: z.ZodObject<{
            message: z.ZodString;
            uuid: z.ZodString;
            type: z.ZodEnum<["message", "warning"]>;
        }, "strip", z.ZodTypeAny, {
            message: string;
            type: "message" | "warning";
            uuid: string;
        }, {
            message: string;
            type: "message" | "warning";
            uuid: string;
        }>;
        answer: z.ZodUndefined;
    };
    triggerPlayerMessage: {
        query: z.ZodObject<{
            message: z.ZodString;
            uuid: z.ZodString;
            type: z.ZodEnum<["message", "warning"]>;
        }, "strip", z.ZodTypeAny, {
            message: string;
            type: "message" | "warning";
            uuid: string;
        }, {
            message: string;
            type: "message" | "warning";
            uuid: string;
        }>;
        answer: z.ZodUndefined;
    };
    removeActionMessage: {
        query: z.ZodObject<{
            uuid: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            uuid: string;
        }, {
            uuid: string;
        }>;
        answer: z.ZodUndefined;
    };
    removePlayerMessage: {
        query: z.ZodObject<{
            uuid: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            uuid: string;
        }, {
            uuid: string;
        }>;
        answer: z.ZodUndefined;
    };
    getEmbeddedWebsite: {
        query: z.ZodString;
        answer: z.ZodObject<{
            name: z.ZodString;
            url: z.ZodString;
            position: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
                width: z.ZodNumber;
                height: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                height: number;
                width: number;
                x: number;
                y: number;
            }, {
                height: number;
                width: number;
                x: number;
                y: number;
            }>;
            visible: z.ZodOptional<z.ZodBoolean>;
            allowApi: z.ZodOptional<z.ZodBoolean>;
            allow: z.ZodOptional<z.ZodString>;
            origin: z.ZodOptional<z.ZodEnum<["player", "map"]>>;
            scale: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            name: string;
            position: {
                height: number;
                width: number;
                x: number;
                y: number;
            };
            allowApi?: boolean | undefined;
            visible?: boolean | undefined;
            allow?: string | undefined;
            origin?: "map" | "player" | undefined;
            scale?: number | undefined;
        }, {
            url: string;
            name: string;
            position: {
                height: number;
                width: number;
                x: number;
                y: number;
            };
            allowApi?: boolean | undefined;
            visible?: boolean | undefined;
            allow?: string | undefined;
            origin?: "map" | "player" | undefined;
            scale?: number | undefined;
        }>;
    };
    deleteEmbeddedWebsite: {
        query: z.ZodString;
        answer: z.ZodUndefined;
    };
    createEmbeddedWebsite: {
        query: z.ZodObject<{
            name: z.ZodString;
            url: z.ZodString;
            position: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
                width: z.ZodNumber;
                height: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                height: number;
                width: number;
                x: number;
                y: number;
            }, {
                height: number;
                width: number;
                x: number;
                y: number;
            }>;
            visible: z.ZodOptional<z.ZodBoolean>;
            allowApi: z.ZodOptional<z.ZodBoolean>;
            allow: z.ZodOptional<z.ZodString>;
            origin: z.ZodOptional<z.ZodEnum<["player", "map"]>>;
            scale: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            name: string;
            position: {
                height: number;
                width: number;
                x: number;
                y: number;
            };
            allowApi?: boolean | undefined;
            visible?: boolean | undefined;
            allow?: string | undefined;
            origin?: "map" | "player" | undefined;
            scale?: number | undefined;
        }, {
            url: string;
            name: string;
            position: {
                height: number;
                width: number;
                x: number;
                y: number;
            };
            allowApi?: boolean | undefined;
            visible?: boolean | undefined;
            allow?: string | undefined;
            origin?: "map" | "player" | undefined;
            scale?: number | undefined;
        }>;
        answer: z.ZodUndefined;
    };
    createArea: {
        query: z.ZodObject<{
            name: z.ZodString;
            x: z.ZodNumber;
            y: z.ZodNumber;
            width: z.ZodNumber;
            height: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            height: number;
            width: number;
            name: string;
            x: number;
            y: number;
        }, {
            height: number;
            width: number;
            name: string;
            x: number;
            y: number;
        }>;
        answer: z.ZodUndefined;
    };
    getArea: {
        query: z.ZodString;
        answer: z.ZodObject<{
            name: z.ZodString;
            x: z.ZodNumber;
            y: z.ZodNumber;
            width: z.ZodNumber;
            height: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            height: number;
            width: number;
            name: string;
            x: number;
            y: number;
        }, {
            height: number;
            width: number;
            name: string;
            x: number;
            y: number;
        }>;
    };
    modifyArea: {
        query: z.ZodObject<{
            name: z.ZodString;
            x: z.ZodOptional<z.ZodNumber>;
            y: z.ZodOptional<z.ZodNumber>;
            width: z.ZodOptional<z.ZodNumber>;
            height: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            height?: number | undefined;
            width?: number | undefined;
            x?: number | undefined;
            y?: number | undefined;
        }, {
            name: string;
            height?: number | undefined;
            width?: number | undefined;
            x?: number | undefined;
            y?: number | undefined;
        }>;
        answer: z.ZodUndefined;
    };
    deleteArea: {
        query: z.ZodString;
        answer: z.ZodUndefined;
    };
    setPlayerOutline: {
        query: z.ZodObject<{
            red: z.ZodNumber;
            green: z.ZodNumber;
            blue: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            red: number;
            green: number;
            blue: number;
        }, {
            red: number;
            green: number;
            blue: number;
        }>;
        answer: z.ZodUndefined;
    };
    removePlayerOutline: {
        query: z.ZodUndefined;
        answer: z.ZodUndefined;
    };
    getPlayerPosition: {
        query: z.ZodUndefined;
        answer: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
        }, {
            x: number;
            y: number;
        }>;
    };
    movePlayerTo: {
        query: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
            speed: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            speed?: number | undefined;
        }, {
            x: number;
            y: number;
            speed?: number | undefined;
        }>;
        answer: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
            cancelled: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            cancelled: boolean;
        }, {
            x: number;
            y: number;
            cancelled: boolean;
        }>;
    };
    teleportPlayerTo: {
        query: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
        }, {
            x: number;
            y: number;
        }>;
        answer: z.ZodUndefined;
    };
    openUIWebsite: {
        query: z.ZodObject<{
            url: z.ZodString;
            visible: z.ZodOptional<z.ZodBoolean>;
            allowApi: z.ZodOptional<z.ZodBoolean>;
            allowPolicy: z.ZodOptional<z.ZodString>;
            position: z.ZodObject<{
                vertical: z.ZodEnum<["top", "middle", "bottom"]>;
                horizontal: z.ZodEnum<["left", "middle", "right"]>;
            }, "strip", z.ZodTypeAny, {
                vertical: "top" | "bottom" | "middle";
                horizontal: "left" | "right" | "middle";
            }, {
                vertical: "top" | "bottom" | "middle";
                horizontal: "left" | "right" | "middle";
            }>;
            size: z.ZodObject<{
                height: z.ZodString;
                width: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                height: string;
                width: string;
            }, {
                height: string;
                width: string;
            }>;
            margin: z.ZodOptional<z.ZodObject<{
                top: z.ZodOptional<z.ZodOptional<z.ZodString>>;
                bottom: z.ZodOptional<z.ZodOptional<z.ZodString>>;
                left: z.ZodOptional<z.ZodOptional<z.ZodString>>;
                right: z.ZodOptional<z.ZodOptional<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                left?: string | undefined;
                top?: string | undefined;
                bottom?: string | undefined;
                right?: string | undefined;
            }, {
                left?: string | undefined;
                top?: string | undefined;
                bottom?: string | undefined;
                right?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            position: {
                vertical: "top" | "bottom" | "middle";
                horizontal: "left" | "right" | "middle";
            };
            size: {
                height: string;
                width: string;
            };
            allowApi?: boolean | undefined;
            allowPolicy?: string | undefined;
            visible?: boolean | undefined;
            margin?: {
                left?: string | undefined;
                top?: string | undefined;
                bottom?: string | undefined;
                right?: string | undefined;
            } | undefined;
        }, {
            url: string;
            position: {
                vertical: "top" | "bottom" | "middle";
                horizontal: "left" | "right" | "middle";
            };
            size: {
                height: string;
                width: string;
            };
            allowApi?: boolean | undefined;
            allowPolicy?: string | undefined;
            visible?: boolean | undefined;
            margin?: {
                left?: string | undefined;
                top?: string | undefined;
                bottom?: string | undefined;
                right?: string | undefined;
            } | undefined;
        }>;
        answer: z.ZodObject<{
            id: z.ZodString;
            url: z.ZodString;
            visible: z.ZodBoolean;
            allowApi: z.ZodBoolean;
            allowPolicy: z.ZodString;
            position: z.ZodObject<{
                vertical: z.ZodEnum<["top", "middle", "bottom"]>;
                horizontal: z.ZodEnum<["left", "middle", "right"]>;
            }, "strip", z.ZodTypeAny, {
                vertical: "top" | "bottom" | "middle";
                horizontal: "left" | "right" | "middle";
            }, {
                vertical: "top" | "bottom" | "middle";
                horizontal: "left" | "right" | "middle";
            }>;
            size: z.ZodObject<{
                height: z.ZodString;
                width: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                height: string;
                width: string;
            }, {
                height: string;
                width: string;
            }>;
            margin: z.ZodOptional<z.ZodObject<{
                top: z.ZodOptional<z.ZodOptional<z.ZodString>>;
                bottom: z.ZodOptional<z.ZodOptional<z.ZodString>>;
                left: z.ZodOptional<z.ZodOptional<z.ZodString>>;
                right: z.ZodOptional<z.ZodOptional<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                left?: string | undefined;
                top?: string | undefined;
                bottom?: string | undefined;
                right?: string | undefined;
            }, {
                left?: string | undefined;
                top?: string | undefined;
                bottom?: string | undefined;
                right?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            id: string;
            allowApi: boolean;
            allowPolicy: string;
            position: {
                vertical: "top" | "bottom" | "middle";
                horizontal: "left" | "right" | "middle";
            };
            visible: boolean;
            size: {
                height: string;
                width: string;
            };
            margin?: {
                left?: string | undefined;
                top?: string | undefined;
                bottom?: string | undefined;
                right?: string | undefined;
            } | undefined;
        }, {
            url: string;
            id: string;
            allowApi: boolean;
            allowPolicy: string;
            position: {
                vertical: "top" | "bottom" | "middle";
                horizontal: "left" | "right" | "middle";
            };
            visible: boolean;
            size: {
                height: string;
                width: string;
            };
            margin?: {
                left?: string | undefined;
                top?: string | undefined;
                bottom?: string | undefined;
                right?: string | undefined;
            } | undefined;
        }>;
    };
    closeUIWebsite: {
        query: z.ZodString;
        answer: z.ZodUndefined;
    };
    getUIWebsites: {
        query: z.ZodUndefined;
        answer: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            url: z.ZodString;
            visible: z.ZodBoolean;
            allowApi: z.ZodBoolean;
            allowPolicy: z.ZodString;
            position: z.ZodObject<{
                vertical: z.ZodEnum<["top", "middle", "bottom"]>;
                horizontal: z.ZodEnum<["left", "middle", "right"]>;
            }, "strip", z.ZodTypeAny, {
                vertical: "top" | "bottom" | "middle";
                horizontal: "left" | "right" | "middle";
            }, {
                vertical: "top" | "bottom" | "middle";
                horizontal: "left" | "right" | "middle";
            }>;
            size: z.ZodObject<{
                height: z.ZodString;
                width: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                height: string;
                width: string;
            }, {
                height: string;
                width: string;
            }>;
            margin: z.ZodOptional<z.ZodObject<{
                top: z.ZodOptional<z.ZodOptional<z.ZodString>>;
                bottom: z.ZodOptional<z.ZodOptional<z.ZodString>>;
                left: z.ZodOptional<z.ZodOptional<z.ZodString>>;
                right: z.ZodOptional<z.ZodOptional<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                left?: string | undefined;
                top?: string | undefined;
                bottom?: string | undefined;
                right?: string | undefined;
            }, {
                left?: string | undefined;
                top?: string | undefined;
                bottom?: string | undefined;
                right?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            id: string;
            allowApi: boolean;
            allowPolicy: string;
            position: {
                vertical: "top" | "bottom" | "middle";
                horizontal: "left" | "right" | "middle";
            };
            visible: boolean;
            size: {
                height: string;
                width: string;
            };
            margin?: {
                left?: string | undefined;
                top?: string | undefined;
                bottom?: string | undefined;
                right?: string | undefined;
            } | undefined;
        }, {
            url: string;
            id: string;
            allowApi: boolean;
            allowPolicy: string;
            position: {
                vertical: "top" | "bottom" | "middle";
                horizontal: "left" | "right" | "middle";
            };
            visible: boolean;
            size: {
                height: string;
                width: string;
            };
            margin?: {
                left?: string | undefined;
                top?: string | undefined;
                bottom?: string | undefined;
                right?: string | undefined;
            } | undefined;
        }>, "many">;
    };
    getUIWebsiteById: {
        query: z.ZodString;
        answer: z.ZodObject<{
            id: z.ZodString;
            url: z.ZodString;
            visible: z.ZodBoolean;
            allowApi: z.ZodBoolean;
            allowPolicy: z.ZodString;
            position: z.ZodObject<{
                vertical: z.ZodEnum<["top", "middle", "bottom"]>;
                horizontal: z.ZodEnum<["left", "middle", "right"]>;
            }, "strip", z.ZodTypeAny, {
                vertical: "top" | "bottom" | "middle";
                horizontal: "left" | "right" | "middle";
            }, {
                vertical: "top" | "bottom" | "middle";
                horizontal: "left" | "right" | "middle";
            }>;
            size: z.ZodObject<{
                height: z.ZodString;
                width: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                height: string;
                width: string;
            }, {
                height: string;
                width: string;
            }>;
            margin: z.ZodOptional<z.ZodObject<{
                top: z.ZodOptional<z.ZodOptional<z.ZodString>>;
                bottom: z.ZodOptional<z.ZodOptional<z.ZodString>>;
                left: z.ZodOptional<z.ZodOptional<z.ZodString>>;
                right: z.ZodOptional<z.ZodOptional<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                left?: string | undefined;
                top?: string | undefined;
                bottom?: string | undefined;
                right?: string | undefined;
            }, {
                left?: string | undefined;
                top?: string | undefined;
                bottom?: string | undefined;
                right?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            id: string;
            allowApi: boolean;
            allowPolicy: string;
            position: {
                vertical: "top" | "bottom" | "middle";
                horizontal: "left" | "right" | "middle";
            };
            visible: boolean;
            size: {
                height: string;
                width: string;
            };
            margin?: {
                left?: string | undefined;
                top?: string | undefined;
                bottom?: string | undefined;
                right?: string | undefined;
            } | undefined;
        }, {
            url: string;
            id: string;
            allowApi: boolean;
            allowPolicy: string;
            position: {
                vertical: "top" | "bottom" | "middle";
                horizontal: "left" | "right" | "middle";
            };
            visible: boolean;
            size: {
                height: string;
                width: string;
            };
            margin?: {
                left?: string | undefined;
                top?: string | undefined;
                bottom?: string | undefined;
                right?: string | undefined;
            } | undefined;
        }>;
    };
    enablePlayersTracking: {
        query: z.ZodObject<{
            players: z.ZodBoolean;
            movement: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            players: boolean;
            movement: boolean;
        }, {
            players: boolean;
            movement: boolean;
        }>;
        answer: z.ZodArray<z.ZodObject<{
            playerId: z.ZodNumber;
            name: z.ZodString;
            userUuid: z.ZodString;
            availabilityStatus: z.ZodString;
            outlineColor: z.ZodOptional<z.ZodNumber>;
            position: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: number;
                y: number;
            }>;
            variables: z.ZodMap<z.ZodString, z.ZodUnknown>;
            chatID: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            position: {
                x: number;
                y: number;
            };
            playerId: number;
            variables: Map<string, unknown>;
            userUuid: string;
            availabilityStatus: string;
            outlineColor?: number | undefined;
            chatID?: string | null | undefined;
        }, {
            name: string;
            position: {
                x: number;
                y: number;
            };
            playerId: number;
            variables: Map<string, unknown>;
            userUuid: string;
            availabilityStatus: string;
            outlineColor?: number | undefined;
            chatID?: string | null | undefined;
        }>, "many">;
    };
    getWoka: {
        query: z.ZodUndefined;
        answer: z.ZodString;
    };
    playSoundInBubble: {
        query: z.ZodObject<{
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            url: string;
        }, {
            url: string;
        }>;
        answer: z.ZodUndefined;
    };
    startStreamInBubble: {
        query: z.ZodObject<{
            sampleRate: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            sampleRate: number;
        }, {
            sampleRate: number;
        }>;
        answer: z.ZodUndefined;
    };
    stopStreamInBubble: {
        query: z.ZodUndefined;
        answer: z.ZodUndefined;
    };
    appendPCMData: {
        query: z.ZodObject<{
            data: z.ZodType<Float32Array<ArrayBuffer>, z.ZodTypeDef, Float32Array<ArrayBuffer>>;
        }, "strip", z.ZodTypeAny, {
            data: Float32Array<ArrayBuffer>;
        }, {
            data: Float32Array<ArrayBuffer>;
        }>;
        answer: z.ZodUndefined;
    };
    resetAudioBuffer: {
        query: z.ZodUndefined;
        answer: z.ZodUndefined;
    };
    followMe: {
        query: z.ZodUndefined;
        answer: z.ZodUndefined;
    };
    stopLeading: {
        query: z.ZodUndefined;
        answer: z.ZodUndefined;
    };
    getWamMapData: {
        query: z.ZodUndefined;
        answer: z.ZodObject<{
            data: z.ZodUnknown;
        }, "strip", z.ZodTypeAny, {
            data?: unknown;
        }, {
            data?: unknown;
        }>;
    };
    playVideo: {
        query: z.ZodObject<{
            url: z.ZodString;
            config: z.ZodOptional<z.ZodObject<{
                loop: z.ZodOptional<z.ZodBoolean>;
                name: z.ZodOptional<z.ZodString>;
                avatar: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                loop?: boolean | undefined;
                avatar?: string | undefined;
            }, {
                name?: string | undefined;
                loop?: boolean | undefined;
                avatar?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            config?: {
                name?: string | undefined;
                loop?: boolean | undefined;
                avatar?: string | undefined;
            } | undefined;
        }, {
            url: string;
            config?: {
                name?: string | undefined;
                loop?: boolean | undefined;
                avatar?: string | undefined;
            } | undefined;
        }>;
        answer: z.ZodString;
    };
    stopVideo: {
        query: z.ZodString;
        answer: z.ZodUndefined;
    };
};
type IframeQueryMapTypeGuardsType = typeof iframeQueryMapTypeGuards;
type UnknownToVoid<T> = undefined extends T ? void : T;
export type IframeQueryMap = {
    [key in keyof IframeQueryMapTypeGuardsType]: {
        query: z.infer<(typeof iframeQueryMapTypeGuards)[key]["query"]>;
        answer: UnknownToVoid<z.infer<(typeof iframeQueryMapTypeGuards)[key]["answer"]>>;
    };
};
export interface IframeQuery<T extends keyof IframeQueryMap> {
    type: T;
    data: IframeQueryMap[T]["query"];
}
export interface IframeQueryWrapper<T extends keyof IframeQueryMap> {
    id: number;
    query: IframeQuery<T>;
}
export declare const isIframeQueryKey: (type: string) => type is keyof IframeQueryMap;
export declare const isIframeQuery: (event: any) => event is IframeQuery<keyof IframeQueryMap>;
export declare const isIframeQueryWrapper: (event: any) => event is IframeQueryWrapper<keyof IframeQueryMap>;
export interface IframeAnswerEvent<T extends keyof IframeQueryMap> {
    id: number;
    type: T;
    data: IframeQueryMap[T]["answer"];
}
export declare const isIframeAnswerEvent: (event: any) => event is IframeAnswerEvent<keyof IframeQueryMap>;
export declare const isIframeErrorAnswerEvent: z.ZodObject<{
    id: z.ZodNumber;
    type: z.ZodString;
    error: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    error: string;
    id: number;
}, {
    type: string;
    error: string;
    id: number;
}>;
/**
 * A message sent from the game to the iFrame when a user enters or leaves a zone.
 */
export type IframeErrorAnswerEvent = z.infer<typeof isIframeErrorAnswerEvent>;
export {};
